import path from 'path';
import * as fs from 'fs';
import { extractMvalueInfoFromFile, removeParagraphTags, removeUnnecessaryComments } from './GuidExtraction';
import { VariableInformation, Match } from './interfaces';
import { cleanExtractedMvalueInfo, storeAsVariableInformation, narrowDownList } from './MValueMatching';
import PromptSync, * as prompt from 'prompt-sync';

const AzureFilePath = path.resolve(__dirname, '../HTMLFiles/Azure.html');
const TargetFilePath = path.resolve(__dirname, '../HTMLFiles/Other.html');
const CopyFilePath = path.resolve(__dirname, '../HTMLFiles/NewFile.html');

// Precleaning
//removeParagraphTags(AzureFilePath);
//removeParagraphTags(TargetFilePath);

//removeUnnecessaryComments(AzureFilePath);
//removeUnnecessaryComments(TargetFilePath);

let AzureVariables: VariableInformation[] = storeAsVariableInformation(cleanExtractedMvalueInfo(extractMvalueInfoFromFile(AzureFilePath)));
let TargetVariables: VariableInformation[] = storeAsVariableInformation(cleanExtractedMvalueInfo(extractMvalueInfoFromFile(TargetFilePath)));

/*
console.log(TargetVariables);

let AzureJson = jsonToCsv(AzureVariables);
let TargetJson = jsonToCsv(TargetVariables);

fs.writeFileSync(path.resolve(__dirname, '../../CSVs/Azure.csv'), AzureJson, 'utf-8');
fs.writeFileSync(path.resolve(__dirname, '../../CSVs/Target.csv'), TargetJson, 'utf-8');
*/

/*
let allPossibleMatches : Map<string, string[]> = new Map();

AzureVariables.forEach((AzureVar: VariableInformation) => {
    allPossibleMatches.set(AzureVar.name, narrowDownList(AzureVar, TargetVariables));
});

console.log(allPossibleMatches);
*/


















function formatOutput(azure: VariableInformation[], target: VariableInformation[]) {
    console.log('AZURE VARIABLE INFORMATION\n');
    azure.forEach((azureVar: VariableInformation) => {
        console.log(azureVar.name + '\t' + azureVar.guid + '\t' + azureVar.table + '\t' + azureVar.column + '\t' + azureVar.row);
    });
    console.log('\nTARGET VARIABLE INFORMATION\n');
    target.forEach((targetVar: VariableInformation) => {
        console.log(targetVar.name + '\t' + targetVar.guid + '\t' + targetVar.table + '\t' + targetVar.column + '\t' + targetVar.row);
    });
}

function verifyResponse(response: string, TargetVariables: VariableInformation[]): VariableInformation | null {
    const match = TargetVariables.find(variable => variable.name === response);
    return match || null;
}

function createCopy(matches: Match[], AzureVariables: VariableInformation[]) {
    let htmlFile = fs.readFileSync(AzureFilePath, 'utf-8');
    matches.forEach((match: Match) => {
        const regex = new RegExp(match.azurevarGuid, 'g');
        htmlFile = htmlFile.replace(regex, match.targetVarGuid);
    });

    AzureVariables.forEach(target => {
        if (!matches.some(match => match.targetVarName === target.name)) {
            const regex = new RegExp(target.guid, 'g');
            htmlFile = htmlFile.replace(regex, '');
        }
    });

    const unusedAzureVariables = AzureVariables.filter(azure => 
        !matches.some(match => match.azureVarName === azure.name)
    );

    fs.writeFileSync(CopyFilePath, htmlFile, 'utf-8');

    return unusedAzureVariables;
}

function main(AzureFilePath: string, TargetFilePath: string) {
    let AzureVariables: VariableInformation[] = storeAsVariableInformation(cleanExtractedMvalueInfo(extractMvalueInfoFromFile(AzureFilePath)));
    let TargetVariables: VariableInformation[] = storeAsVariableInformation(cleanExtractedMvalueInfo(extractMvalueInfoFromFile(TargetFilePath)));
    
    formatOutput(AzureVariables, TargetVariables);

    let allPossibleMatches : Map<string, string[]> = new Map();
    AzureVariables.forEach((AzureVar: VariableInformation) => {
        allPossibleMatches.set(AzureVar.name, narrowDownList(AzureVar, TargetVariables));
    });

    console.log('\nWARNING: THE FOLLOWING AUTOGENERATED MATCHES MAY BE INCORRECT PLEASE CHECK TO MAKE SURE THEY ARE CORRECT.\n');

    const prompt = PromptSync();

    let userMatches: Match[] = [];
    AzureVariables.forEach((variable: VariableInformation) => {
        let userInstruction: string;
        let possibleMatch = allPossibleMatches.get(variable.name);
        if (possibleMatch && possibleMatch.length > 0) {
            userInstruction = prompt(`Enter matching variable name for ${variable.name} [Recommended: ${possibleMatch}] (Enter "n" for no match or "y" to use recommended match): `);
        } else {
            userInstruction = prompt(`Enter matching variable name for ${variable.name} (Enter "n" for no match): `);
        }
        if (userInstruction !== 'n') {
            let matchedTarget;
            if (userInstruction === 'y') {
                matchedTarget = verifyResponse(possibleMatch![0], TargetVariables);    
            } else {
                matchedTarget = verifyResponse(userInstruction, TargetVariables);
            }
            if (matchedTarget) {
                userMatches.push({ 
                                    azurevarGuid: variable.guid,
                                    azureVarName: variable.name,
                                    targetVarGuid: matchedTarget.guid,
                                    targetVarName: matchedTarget.name
                                });
            } else {
                while (userInstruction !== 'n' && !matchedTarget) {
                    console.log('This variable does not exist please try again');
                    possibleMatch = allPossibleMatches.get(variable.name);
                    if (possibleMatch && possibleMatch.length > 0) {
                        userInstruction = prompt(`Enter matching variable name for ${variable.name} [Recommended: ${possibleMatch}] (Enter "n" for no match or "y" to use recommended match): `);
                    } else {
                        userInstruction = prompt(`Enter matching variable name for ${variable.name} (Enter "n" for no match): `);
                    }
                    if (userInstruction !== 'n') {
                        if (userInstruction === 'y') {
                            matchedTarget = verifyResponse(possibleMatch![0], TargetVariables);    
                        } else {
                            matchedTarget = verifyResponse(userInstruction, TargetVariables);
                        }
                        if (matchedTarget) {
                            userMatches.push({ 
                                                azurevarGuid: variable.guid,
                                                azureVarName: variable.name,
                                                targetVarGuid: matchedTarget.guid,
                                                targetVarName: matchedTarget.name
                                            });
                        }
                    }
                }
            }
        }
    });
    let unused = createCopy(userMatches, AzureVariables);
    
    console.log('\n\nThe following may potentially need to have a mapping created or found elsewhere due to being unmatched:\n');
    unused.forEach((variable: VariableInformation) => {
        console.log(`${variable.name}\t${variable.guid}`);
    });
}


main(AzureFilePath, TargetFilePath);
